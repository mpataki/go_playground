// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mpataki/go_playground/proto/greeting/v1/greeting_service.proto

package greetingv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/mpataki/go_playground/proto/gen/go/greeting/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GreetingServiceName is the fully-qualified name of the GreetingService service.
	GreetingServiceName = "mpataki.go_playground.proto.greeting.v1.GreetingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GreetingServiceSayHelloProcedure is the fully-qualified name of the GreetingService's SayHello
	// RPC.
	GreetingServiceSayHelloProcedure = "/mpataki.go_playground.proto.greeting.v1.GreetingService/SayHello"
)

// GreetingServiceClient is a client for the mpataki.go_playground.proto.greeting.v1.GreetingService
// service.
type GreetingServiceClient interface {
	// SayHello sends a single greeting
	SayHello(context.Context, *connect_go.Request[v1.HelloRequest]) (*connect_go.Response[v1.HelloResponse], error)
}

// NewGreetingServiceClient constructs a client for the
// mpataki.go_playground.proto.greeting.v1.GreetingService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGreetingServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GreetingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &greetingServiceClient{
		sayHello: connect_go.NewClient[v1.HelloRequest, v1.HelloResponse](
			httpClient,
			baseURL+GreetingServiceSayHelloProcedure,
			opts...,
		),
	}
}

// greetingServiceClient implements GreetingServiceClient.
type greetingServiceClient struct {
	sayHello *connect_go.Client[v1.HelloRequest, v1.HelloResponse]
}

// SayHello calls mpataki.go_playground.proto.greeting.v1.GreetingService.SayHello.
func (c *greetingServiceClient) SayHello(ctx context.Context, req *connect_go.Request[v1.HelloRequest]) (*connect_go.Response[v1.HelloResponse], error) {
	return c.sayHello.CallUnary(ctx, req)
}

// GreetingServiceHandler is an implementation of the
// mpataki.go_playground.proto.greeting.v1.GreetingService service.
type GreetingServiceHandler interface {
	// SayHello sends a single greeting
	SayHello(context.Context, *connect_go.Request[v1.HelloRequest]) (*connect_go.Response[v1.HelloResponse], error)
}

// NewGreetingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGreetingServiceHandler(svc GreetingServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	greetingServiceSayHelloHandler := connect_go.NewUnaryHandler(
		GreetingServiceSayHelloProcedure,
		svc.SayHello,
		opts...,
	)
	return "/mpataki.go_playground.proto.greeting.v1.GreetingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GreetingServiceSayHelloProcedure:
			greetingServiceSayHelloHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGreetingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGreetingServiceHandler struct{}

func (UnimplementedGreetingServiceHandler) SayHello(context.Context, *connect_go.Request[v1.HelloRequest]) (*connect_go.Response[v1.HelloResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mpataki.go_playground.proto.greeting.v1.GreetingService.SayHello is not implemented"))
}
